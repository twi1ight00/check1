using System;
using System.Collections.Generic;
using Microsoft.Practices.Unity.Configuration.ConfigurationHelpers;
using Microsoft.Practices.Unity.Utility;

namespace Microsoft.Practices.Unity.Configuration;

/// <summary>
/// Base class for configuration elements that generate <see cref="T:Microsoft.Practices.Unity.InjectionMember" />
/// object to configure a container.
/// </summary>
public abstract class InjectionMemberElement : DeserializableConfigurationElement
{
	/// <summary>
	/// Each element must have a unique key, which is generated by the subclasses.
	/// </summary>
	public abstract string Key { get; }

	/// <summary>
	/// Element name to use to serialize this into XML.
	/// </summary>
	public virtual string ElementName => ExtensionElementMap.GetTagForExtensionElement(this);

	/// <summary>
	/// Return the set of <see cref="T:Microsoft.Practices.Unity.InjectionMember" />s that are needed
	/// to configure the container according to this configuration element.
	/// </summary>
	/// <param name="container">Container that is being configured.</param>
	/// <param name="fromType">Type that is being registered.</param>
	/// <param name="toType">Type that <paramref name="fromType" /> is being mapped to.</param>
	/// <param name="name">Name this registration is under.</param>
	/// <returns>One or more <see cref="T:Microsoft.Practices.Unity.InjectionMember" /> objects that should be
	/// applied to the container registration.</returns>
	public abstract IEnumerable<InjectionMember> GetInjectionMembers(IUnityContainer container, Type fromType, Type toType, string name);

	/// <summary>
	/// Get the standard tag name for an <see cref="T:Microsoft.Practices.Unity.Configuration.InjectionMemberElement" />
	/// taking into account currently loaded section extensions.
	/// </summary>
	/// <param name="memberElement">Element to get the name for.</param>
	/// <returns>The element name.</returns>
	/// <exception cref="T:System.ArgumentException">If the member element is not currently registered
	/// with the section.</exception>
	public static string GetMemberElementName(InjectionMemberElement memberElement)
	{
		Guard.ArgumentNotNull(memberElement, "memberElement");
		return memberElement.ElementName;
	}
}
