using System.Collections.Generic;
using System.Runtime.CompilerServices;
using ns60;
using ns62;

namespace ns63;

internal class Class2720 : Class2639, Interface44
{
	public const int int_0 = 1008;

	public static byte[] byte_0 = new byte[1600]
	{
		1, 0, 241, 3, 8, 0, 0, 0, 0, 0,
		0, 128, 0, 0, 10, 48, 15, 0, 12, 4,
		192, 5, 0, 0, 15, 0, 2, 240, 184, 5,
		0, 0, 64, 0, 8, 240, 8, 0, 0, 0,
		7, 0, 0, 0, 7, 16, 0, 0, 15, 0,
		3, 240, 80, 5, 0, 0, 15, 0, 4, 240,
		40, 0, 0, 0, 1, 0, 9, 240, 16, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 2, 0,
		10, 240, 8, 0, 0, 0, 0, 16, 0, 0,
		5, 0, 0, 0, 15, 0, 4, 240, 200, 0,
		0, 0, 18, 0, 10, 240, 8, 0, 0, 0,
		2, 16, 0, 0, 0, 10, 0, 0, 131, 0,
		11, 240, 48, 0, 0, 0, 127, 0, 1, 0,
		5, 0, 128, 0, 84, 105, 102, 2, 129, 1,
		4, 0, 0, 8, 131, 1, 0, 0, 0, 8,
		191, 1, 1, 0, 17, 0, 192, 1, 1, 0,
		0, 8, 255, 1, 1, 0, 9, 0, 1, 2,
		2, 0, 0, 8, 0, 0, 16, 240, 8, 0,
		0, 0, 0, 0, 0, 0, 80, 7, 32, 1,
		15, 0, 17, 240, 16, 0, 0, 0, 0, 0,
		195, 11, 8, 0, 0, 0, 0, 0, 0, 0,
		10, 2, 102, 2, 15, 0, 13, 240, 80, 0,
		0, 0, 0, 0, 159, 15, 4, 0, 0, 0,
		4, 0, 0, 0, 0, 0, 160, 15, 2, 0,
		0, 0, 42, 0, 0, 0, 161, 15, 20, 0,
		0, 0, 2, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 2, 0, 0, 0, 0, 0, 2, 0,
		12, 0, 0, 0, 249, 15, 4, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 170, 15, 10, 0,
		0, 0, 2, 0, 0, 0, 1, 0, 0, 0,
		0, 0, 15, 0, 4, 240, 202, 0, 0, 0,
		18, 0, 10, 240, 8, 0, 0, 0, 3, 16,
		0, 0, 0, 10, 0, 0, 131, 0, 11, 240,
		48, 0, 0, 0, 127, 0, 1, 0, 5, 0,
		128, 0, 116, 109, 102, 2, 129, 1, 4, 0,
		0, 8, 131, 1, 0, 0, 0, 8, 191, 1,
		1, 0, 17, 0, 192, 1, 1, 0, 0, 8,
		255, 1, 1, 0, 9, 0, 1, 2, 2, 0,
		0, 8, 0, 0, 16, 240, 8, 0, 0, 0,
		0, 0, 143, 9, 223, 16, 32, 1, 15, 0,
		17, 240, 16, 0, 0, 0, 0, 0, 195, 11,
		8, 0, 0, 0, 1, 0, 0, 0, 7, 0,
		102, 2, 15, 0, 13, 240, 82, 0, 0, 0,
		0, 0, 159, 15, 4, 0, 0, 0, 4, 0,
		0, 0, 0, 0, 160, 15, 2, 0, 0, 0,
		42, 0, 0, 0, 161, 15, 22, 0, 0, 0,
		2, 0, 0, 0, 0, 0, 0, 8, 0, 0,
		2, 0, 2, 0, 0, 0, 0, 0, 2, 0,
		12, 0, 0, 0, 248, 15, 4, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 170, 15, 10, 0,
		0, 0, 2, 0, 0, 0, 1, 0, 0, 0,
		0, 0, 15, 0, 4, 240, 100, 0, 0, 0,
		18, 0, 10, 240, 8, 0, 0, 0, 4, 16,
		0, 0, 0, 10, 0, 0, 99, 0, 11, 240,
		36, 0, 0, 0, 127, 0, 4, 1, 4, 1,
		135, 0, 1, 0, 0, 0, 127, 1, 0, 0,
		1, 0, 191, 1, 17, 0, 17, 0, 255, 1,
		8, 0, 9, 0, 63, 2, 1, 0, 1, 0,
		0, 0, 16, 240, 8, 0, 0, 0, 176, 1,
		208, 2, 16, 14, 32, 10, 15, 0, 17, 240,
		16, 0, 0, 0, 0, 0, 195, 11, 8, 0,
		0, 0, 2, 0, 0, 0, 5, 0, 102, 2,
		15, 0, 4, 240, 92, 1, 0, 0, 18, 0,
		10, 240, 8, 0, 0, 0, 5, 16, 0, 0,
		0, 10, 0, 0, 131, 0, 11, 240, 48, 0,
		0, 0, 127, 0, 1, 0, 5, 0, 128, 0,
		104, 106, 102, 2, 129, 1, 4, 0, 0, 8,
		131, 1, 0, 0, 0, 8, 191, 1, 1, 0,
		17, 0, 192, 1, 1, 0, 0, 8, 255, 1,
		1, 0, 9, 0, 1, 2, 2, 0, 0, 8,
		0, 0, 16, 240, 8, 0, 0, 0, 176, 10,
		176, 1, 48, 15, 208, 20, 15, 0, 17, 240,
		16, 0, 0, 0, 0, 0, 195, 11, 8, 0,
		0, 0, 3, 0, 0, 0, 6, 2, 102, 2,
		15, 0, 13, 240, 228, 0, 0, 0, 0, 0,
		159, 15, 4, 0, 0, 0, 2, 0, 0, 0,
		0, 0, 160, 15, 152, 0, 0, 0, 30, 4,
		49, 4, 64, 4, 48, 4, 55, 4, 53, 4,
		70, 4, 32, 0, 66, 4, 53, 4, 58, 4,
		65, 4, 66, 4, 48, 4, 13, 0, 18, 4,
		66, 4, 62, 4, 64, 4, 62, 4, 57, 4,
		32, 0, 67, 4, 64, 4, 62, 4, 50, 4,
		53, 4, 61, 4, 76, 4, 13, 0, 34, 4,
		64, 4, 53, 4, 66, 4, 56, 4, 57, 4,
		32, 0, 67, 4, 64, 4, 62, 4, 50, 4,
		53, 4, 61, 4, 76, 4, 13, 0, 39, 4,
		53, 4, 66, 4, 50, 4, 53, 4, 64, 4,
		66, 4, 75, 4, 57, 4, 32, 0, 67, 4,
		64, 4, 62, 4, 50, 4, 53, 4, 61, 4,
		76, 4, 13, 0, 31, 4, 79, 4, 66, 4,
		75, 4, 57, 4, 32, 0, 67, 4, 64, 4,
		62, 4, 50, 4, 53, 4, 61, 4, 76, 4,
		0, 0, 162, 15, 30, 0, 0, 0, 15, 0,
		0, 0, 0, 0, 15, 0, 0, 0, 1, 0,
		15, 0, 0, 0, 2, 0, 18, 0, 0, 0,
		3, 0, 14, 0, 0, 0, 4, 0, 0, 0,
		170, 15, 10, 0, 0, 0, 77, 0, 0, 0,
		1, 0, 0, 0, 0, 0, 15, 0, 4, 240,
		206, 0, 0, 0, 18, 0, 10, 240, 8, 0,
		0, 0, 6, 16, 0, 0, 0, 10, 0, 0,
		147, 0, 11, 240, 54, 0, 0, 0, 127, 0,
		1, 0, 5, 0, 128, 0, 32, 118, 102, 2,
		135, 0, 2, 0, 0, 0, 129, 1, 4, 0,
		0, 8, 131, 1, 0, 0, 0, 8, 191, 1,
		1, 0, 17, 0, 192, 1, 1, 0, 0, 8,
		255, 1, 1, 0, 9, 0, 1, 2, 2, 0,
		0, 8, 0, 0, 16, 240, 8, 0, 0, 0,
		95, 21, 0, 0, 80, 7, 127, 22, 15, 0,
		17, 240, 16, 0, 0, 0, 0, 0, 195, 11,
		8, 0, 0, 0, 4, 0, 0, 0, 9, 2,
		102, 2, 15, 0, 13, 240, 80, 0, 0, 0,
		0, 0, 159, 15, 4, 0, 0, 0, 4, 0,
		0, 0, 0, 0, 160, 15, 2, 0, 0, 0,
		42, 0, 0, 0, 161, 15, 20, 0, 0, 0,
		2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		2, 0, 0, 0, 0, 0, 2, 0, 12, 0,
		0, 0, 250, 15, 4, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 170, 15, 10, 0, 0, 0,
		2, 0, 0, 0, 1, 0, 0, 0, 0, 0,
		15, 0, 4, 240, 208, 0, 0, 0, 18, 0,
		10, 240, 8, 0, 0, 0, 7, 16, 0, 0,
		0, 10, 0, 0, 147, 0, 11, 240, 54, 0,
		0, 0, 127, 0, 1, 0, 5, 0, 128, 0,
		76, 117, 102, 2, 135, 0, 2, 0, 0, 0,
		129, 1, 4, 0, 0, 8, 131, 1, 0, 0,
		0, 8, 191, 1, 1, 0, 17, 0, 192, 1,
		1, 0, 0, 8, 255, 1, 1, 0, 9, 0,
		1, 2, 2, 0, 0, 8, 0, 0, 16, 240,
		8, 0, 0, 0, 95, 21, 143, 9, 223, 16,
		127, 22, 15, 0, 17, 240, 16, 0, 0, 0,
		0, 0, 195, 11, 8, 0, 0, 0, 5, 0,
		0, 0, 8, 2, 102, 2, 15, 0, 13, 240,
		82, 0, 0, 0, 0, 0, 159, 15, 4, 0,
		0, 0, 4, 0, 0, 0, 0, 0, 160, 15,
		2, 0, 0, 0, 42, 0, 0, 0, 161, 15,
		22, 0, 0, 0, 2, 0, 0, 0, 0, 0,
		0, 8, 0, 0, 2, 0, 2, 0, 0, 0,
		0, 0, 2, 0, 12, 0, 0, 0, 216, 15,
		4, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		170, 15, 10, 0, 0, 0, 2, 0, 0, 0,
		1, 0, 0, 0, 0, 0, 15, 0, 4, 240,
		72, 0, 0, 0, 18, 0, 10, 240, 8, 0,
		0, 0, 1, 16, 0, 0, 0, 12, 0, 0,
		131, 0, 11, 240, 48, 0, 0, 0, 129, 1,
		0, 0, 0, 8, 131, 1, 5, 0, 0, 8,
		147, 1, 222, 189, 104, 0, 148, 1, 142, 159,
		139, 0, 191, 1, 18, 0, 18, 0, 255, 1,
		0, 0, 8, 0, 4, 3, 9, 0, 0, 0,
		63, 3, 1, 0, 1, 0, 16, 0, 240, 7,
		32, 0, 0, 0, 255, 255, 255, 0, 0, 0,
		0, 0, 128, 128, 128, 0, 0, 0, 0, 0,
		187, 224, 227, 0, 51, 51, 153, 0, 0, 153,
		153, 0, 153, 204, 0, 0, 15, 0, 136, 19,
		56, 0, 0, 0, 15, 0, 138, 19, 48, 0,
		0, 0, 0, 0, 186, 15, 16, 0, 0, 0,
		95, 0, 95, 0, 95, 0, 80, 0, 80, 0,
		84, 0, 49, 0, 48, 0, 0, 0, 139, 19,
		16, 0, 0, 0, 0, 0, 235, 46, 8, 0,
		0, 0, 119, 114, 196, 1, 96, 245, 51, 128
	};

	public static byte[] byte_1 = new byte[547]
	{
		1, 0, 241, 3, 8, 0, 0, 0, 0, 1,
		0, 0, 7, 0, 10, 48, 15, 0, 12, 4,
		163, 1, 0, 0, 15, 0, 2, 240, 155, 1,
		0, 0, 80, 0, 8, 240, 8, 0, 0, 0,
		3, 0, 0, 0, 3, 20, 0, 0, 15, 0,
		3, 240, 51, 1, 0, 0, 15, 0, 4, 240,
		40, 0, 0, 0, 1, 0, 9, 240, 16, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 2, 0,
		10, 240, 8, 0, 0, 0, 0, 20, 0, 0,
		5, 0, 0, 0, 15, 0, 4, 240, 88, 0,
		0, 0, 18, 0, 10, 240, 8, 0, 0, 0,
		2, 20, 0, 0, 32, 2, 0, 0, 67, 0,
		11, 240, 24, 0, 0, 0, 127, 0, 4, 0,
		4, 0, 191, 1, 1, 0, 1, 0, 255, 1,
		1, 0, 1, 0, 1, 3, 4, 16, 0, 0,
		0, 0, 16, 240, 8, 0, 0, 0, 176, 1,
		208, 2, 16, 14, 32, 10, 15, 0, 17, 240,
		16, 0, 0, 0, 0, 0, 195, 11, 8, 0,
		0, 0, 0, 0, 0, 0, 11, 0, 102, 2,
		15, 0, 4, 240, 155, 0, 0, 0, 18, 0,
		10, 240, 8, 0, 0, 0, 3, 20, 0, 0,
		32, 2, 0, 0, 83, 0, 11, 240, 30, 0,
		0, 0, 127, 0, 0, 0, 4, 0, 128, 0,
		152, 136, 102, 2, 191, 1, 0, 0, 1, 0,
		255, 1, 0, 0, 1, 0, 1, 3, 5, 16,
		0, 0, 0, 0, 16, 240, 8, 0, 0, 0,
		176, 10, 176, 1, 48, 15, 208, 20, 15, 0,
		17, 240, 16, 0, 0, 0, 0, 0, 195, 11,
		8, 0, 0, 0, 1, 0, 0, 0, 12, 0,
		102, 2, 15, 0, 13, 240, 53, 0, 0, 0,
		0, 0, 159, 15, 4, 0, 0, 0, 2, 0,
		0, 0, 0, 0, 168, 15, 1, 0, 0, 0,
		32, 0, 0, 170, 15, 24, 0, 0, 0, 1,
		0, 0, 0, 7, 0, 0, 0, 0, 0, 9,
		4, 0, 0, 1, 0, 0, 0, 1, 0, 0,
		0, 0, 0, 15, 0, 4, 240, 72, 0, 0,
		0, 18, 0, 10, 240, 8, 0, 0, 0, 1,
		20, 0, 0, 0, 12, 0, 0, 131, 0, 11,
		240, 48, 0, 0, 0, 129, 1, 0, 0, 0,
		8, 131, 1, 5, 0, 0, 8, 147, 1, 222,
		189, 104, 0, 148, 1, 142, 159, 139, 0, 191,
		1, 18, 0, 18, 0, 255, 1, 0, 0, 8,
		0, 4, 3, 9, 0, 0, 0, 63, 3, 1,
		0, 1, 0, 16, 0, 240, 7, 32, 0, 0,
		0, 255, 255, 255, 0, 0, 0, 0, 0, 128,
		128, 128, 0, 0, 0, 0, 0, 187, 224, 227,
		0, 51, 51, 153, 0, 0, 153, 153, 0, 153,
		204, 0, 0, 15, 0, 136, 19, 56, 0, 0,
		0, 15, 0, 138, 19, 48, 0, 0, 0, 0,
		0, 186, 15, 16, 0, 0, 0, 95, 0, 95,
		0, 95, 0, 80, 0, 80, 0, 84, 0, 49,
		0, 48, 0, 0, 0, 139, 19, 16, 0, 0,
		0, 0, 0, 235, 46, 8, 0, 0, 0, 119,
		114, 196, 1, 80, 33, 59, 128
	};

	internal bool bool_2 = true;

	internal Class2884 class2884_0;

	private static readonly int[] int_1 = new int[16]
	{
		1009, 2147483647, 1036, 2147483647, 2032, 1, 4026, 3, 5000, 2147483647,
		1038, 2147483647, 1039, 2147483647, 1063, 2147483647
	};

	[CompilerGenerated]
	private uint uint_0;

	public Class2884 NotesAtom
	{
		get
		{
			class2884_0 = (Class2884)method_1(1009);
			return class2884_0;
		}
	}

	public Class2714 Drawing => method_1(1036) as Class2714;

	public Class2840 SlideSchemeColorSchemeAtom => (Class2840)method_3(2032, 1);

	public string SlideName => method_5(3);

	public Class2728 SlideProgTagsContainer
	{
		get
		{
			return (Class2728)method_1(5000);
		}
		set
		{
			int num = 0;
			while (true)
			{
				if (num < base.Records.Count)
				{
					if (base.Records[num].Type == 5000)
					{
						break;
					}
					num++;
					continue;
				}
				method_2(value);
				return;
			}
			base.Records[num] = value;
		}
	}

	public Class2779 RoundTripThemeAtom => (Class2779)method_1(1038);

	public Class2786 RoundTripColorMappingAtom => (Class2786)method_1(1039);

	public Class2777 RoundTripNotesMasterTextStyles12Atom => (Class2777)method_1(1063);

	public uint PersistId
	{
		[CompilerGenerated]
		get
		{
			return uint_0;
		}
		[CompilerGenerated]
		set
		{
			uint_0 = value;
		}
	}

	public Class2720()
	{
		base.Header.Type = 1008;
	}

	public string method_5(short instance)
	{
		int num = 0;
		while (true)
		{
			if (num < base.Records.Count)
			{
				if (base.Records[num] is Class2843 && ((Class2843)base.Records[num]).Header.Instance == instance)
				{
					break;
				}
				num++;
				continue;
			}
			return "";
		}
		return ((Class2843)base.Records[num]).String;
	}

	protected override int[] vmethod_6()
	{
		return int_1;
	}

	public uint method_6(uint id)
	{
		uint spid = Drawing.OfficeArtDg.GroupShape.ShapeProp.Spid;
		uint num = id;
		List<Class2623> records = Drawing.OfficeArtDg.Records;
		for (int i = 0; i < records.Count; i++)
		{
			if (records[i] is Class2671)
			{
				if (((Class2671)records[i]).ShapePrimaryOptions != null && ((Class2671)records[i]).ShapePrimaryOptions.Properties.Contains(Enum426.const_0))
				{
					((Class2671)records[i]).ShapePrimaryOptions.Properties.Remove(Enum426.const_0);
				}
				num = method_7(id, spid, (Class2671)records[i], num);
			}
			else
			{
				if (!(records[i] is Class2670))
				{
					continue;
				}
				if (((Class2670)records[i]).ShapeProp != null)
				{
					((Class2670)records[i]).ShapeProp.Spid = id + (((Class2670)records[i]).ShapeProp.Spid - spid);
					if (((Class2670)records[i]).ShapeProp.Spid > num)
					{
						num = ((Class2670)records[i]).ShapeProp.Spid;
					}
				}
				if (((Class2670)records[i]).ShapePrimaryOptions != null && ((Class2670)records[i]).ShapePrimaryOptions.Properties.Contains(Enum426.const_0))
				{
					((Class2670)records[i]).ShapePrimaryOptions.Properties.Remove(Enum426.const_0);
				}
			}
		}
		Drawing.OfficeArtDg.DrawingData.SpidLast = num;
		return num;
	}

	private uint method_7(uint id, uint oldBaseId, Class2671 group, uint newMaxId)
	{
		List<Class2623> records = group.Records;
		for (int i = 0; i < records.Count; i++)
		{
			if (records[i] is Class2671)
			{
				if (((Class2671)records[i]).ShapePrimaryOptions != null && ((Class2671)records[i]).ShapePrimaryOptions.Properties.Contains(Enum426.const_0))
				{
					((Class2671)records[i]).ShapePrimaryOptions.Properties.Remove(Enum426.const_0);
				}
				newMaxId = method_7(id, oldBaseId, (Class2671)records[i], newMaxId);
			}
			else
			{
				if (!(records[i] is Class2670))
				{
					continue;
				}
				if (((Class2670)records[i]).ShapeProp != null)
				{
					((Class2670)records[i]).ShapeProp.Spid = id + (((Class2670)records[i]).ShapeProp.Spid - oldBaseId);
					if (((Class2670)records[i]).ShapeProp.Spid > newMaxId)
					{
						newMaxId = ((Class2670)records[i]).ShapeProp.Spid;
					}
				}
				if (((Class2670)records[i]).ShapePrimaryOptions != null && ((Class2670)records[i]).ShapePrimaryOptions.Properties.Contains(Enum426.const_0))
				{
					((Class2670)records[i]).ShapePrimaryOptions.Properties.Remove(Enum426.const_0);
				}
			}
		}
		return newMaxId;
	}
}
